#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 2 -*-
#
'''
Author: Allan GooD: allan.cassaro@gmail.com
Date: 2014-10-01

Plugin on monitored host:
--- BEGIN ---
#!/bin/bash

echo "<<<squid>>>"
/usr/bin/squidclient -p 3128 -T2 mgr:5min | grep =
--- END ---
'''

squid_reqps_values = (600,800)
squid_server_reqps_values = (600,800)
squid_dns_time = (1,3)
squid_cpu_time = (60,80)

def inventory_squid(info):
  inventory = []
  for line in info:
    if (line[0] == 'client_http.requests'):
      inventory.append(('Client Requests/s','squid_reqps_values'))
    elif (line[0] == 'client_http.hits'):
      inventory.append(('Client Hits/s',None))
    elif (line[0] == 'server.all.requests'):
      inventory.append(('Server Request/s','squid_server_reqps_values'))
    elif (line[0] == 'dns.median_svc_time'):
      inventory.append(('DNS response time','squid_dns_time'))
    elif (line[0] == 'cpu_usage'):
      inventory.append(('CPU Usage','squid_cpu_time'))
  return inventory

#==========================================================

def check_squid(item, params, info):
  if params is not None:  
    warn, crit = params
  else:
    warn, crit = (0,0)
  for line in info:
    if (item == 'Client Requests/s') and (line[0] == 'client_http.requests'):
      client_reqs = float(line[2][:-4])
      perfdata = [("client_http.requests",client_reqs,warn,crit)]
      if (client_reqs >= crit):
        return(2,'Client: %0.2f Requests per second' % client_reqs, perfdata)
      elif (client_reqs >= warn):
        return(1,'Client: %0.2f Requests per second' % client_reqs, perfdata)
      elif (client_reqs < warn):
        return(0,'Client: %0.2f Requests per second' % client_reqs, perfdata)

    elif (item == 'Client Hits/s') and (line[0] == 'client_http.hits'):
      hitsps = float(line[2][:-4])
      perfdata = [("client_http.hits",hitsps)]
      return(0,'Client: %0.4f Hits per second' % hitsps,perfdata)

    elif (item == 'Server Request/s') and (line[0] == 'server.all.requests'):
      server_reqs = float(line[2][:-4])
      perfdata = [("server.all.requests",server_reqs,warn,crit)]
      if (server_reqs >= crit):
        return(2,'Server: %0.2f Requests per second' % server_reqs, perfdata)
      elif (server_reqs >= warn):
        return(1,'Server: %0.2f Requests per second' % server_reqs, perfdata)
      elif (server_reqs < warn):
        return(0,'Server: %0.2f Requests per second' % server_reqs, perfdata)

    elif (item == 'DNS response time') and (line[0] == 'dns.median_svc_time'):
      dns_time = float(line[2])
      perfdata = [("dns.median_svc_time",dns_time,warn,crit)]
      if (dns_time >= crit):
        return(2,'DNS Response time (avg): %0.4f seconds' % dns_time, perfdata)
      elif (dns_time >= warn):
        return(1,'DNS Resposnse time (avg): %0.4f seconds' % dns_time, perfdata)
      elif (dns_time < warn):
        return(0,'DNS Resposnse time (avg): %0.4f seconds' % dns_time, perfdata)

    elif (item == 'CPU Usage') and (line[0] == 'cpu_usage'):
      cpu = float(line[2][:-1])
      perfdata = [("cpu_usage",cpu,warn,crit)]
      if (cpu >= crit):
        return(2,'CPU Usage: %0.4f%%' % cpu, perfdata)
      elif (cpu >= warn):
        return(1,'CPU Usage: %0.4f%%' % cpu, perfdata)
      elif (cpu < warn):
        return(0,'CPU Usage: %0.4f%%' % cpu, perfdata)

  return (3,'No information available')
   

check_info["squid"] = {
  'check_function':		check_squid,
  'inventory_function':		inventory_squid,
  'service_description':	'Squid %s',
  'group':			'squid_check',
  'has_perfdata':		True,
}
